BUILDING AND INSTALLATION HINTS FOR CEXP
$Id$

For building Cexp you will need the
following programs and libraries:

Tools:
------
 - usual (cross) compiler toolchain
 - GNU bison (yacc is not enough).

NOTE: bison is only required if you
         change the grammar 'cexp.y'

Libraries:
----------
 - libbfd, libopcodes, libiberty (vers. 2.13, distributed with Cexp)
 - libelf (vers. 0.8.0 distributed with Cexp)
   NOTE: libelf is only needed
     1) if cexp is configured for using libelf instead of BFD
        (discouraged; reduced functionality but a less restrictive
         license: LGPL vs. GPL) 
     2) for building the host tool 'xsyms' (not ported to BFD yet)
        which allows for extracting a symbol table from an ELF file.
 - Spencer's libregexp (distributed with Cexp)
 - libtecla: clean & lean & reentrant line editor. I like it much
   better than GNU readline (messy, bloated & non-reentrant). Its
   license (X11) is less restrictive than readline's (GPL)
   NOTE: the version distributed with Cexp has been slightly
   patched to support RTEMS.
 - alternatively: GNU libreadline, which in turn requires
   libncurses or libtermcap. NOTE: libreadline is _not_ reentrant
   and hence should _NOT_ be used on RTEMS (unless you have
   one single thread using it) - I recommend using TECLA: it's smaller
   and nicer. Also, CEXP has command completion implemented for
   TECLA.

Building:
---------

Configuring Cexp:
- - - - - - - - -

NOTE: I'm not an autoconf/automake nightmare expert and I HATE
automake almost as much as I do windoze.

chdir to the source topdir and make a directory, e.g.

	mkdir build-i386-linux

chdir to the new directory and issue

	../configure --disable-nls

When doing a 'cross-build' (e.g. for RTEMS), you need to
set the CC environment variable an specify the host architecture
on which Cexp shall be executed:

	setenv CC powerpc-rtems-gcc
	../configure --host=powerpc-rtems --disable-nls

If you use a later gcc version with multilib support (such as
gcc-3.2 distributed by OAR/RTEMS) you most probably want to
select your CPU model (unless you are confident you will live
long enough to see the results and you can afford the disk space
it will take):

	../configure --host=powerpc-rtems --with-multisubdir=m750 --disable-nls

this example restricts the build to PowerPC mPC750...

The configure script recognizes several options:

	--help		list known options
	--disable-nls	disable native language support.
			You probably _must_ specify this as several
			directories have been deleted from the distributed
			libbfd...
	--disable-bfd	use libelf instead of libbfd. Note that this comes
			at the expense of losing the runtime loader and
			the disassembler functionality.
	--disable-tecla	don't use the TECLA library (discouraged)
	--disable-readline don't use GNU readline either (this option is only
			effective if --disable-tecla is also specified)

	--prefix=<path> where the libraries, headers and GNU documentation
			should be installed

Building Cexp :
- - - - - - - -

In the directory where you configured 'cexp', issue

	make

this builds the object file interface librarie(s) (libbfd, libopcode, libiberty
of libelf), the tecla library, the regexp library, the cexp library and (on a
host only) the 'cexp' demo program and the 'xsyms' utility.


NOTE: 'xsyms' is a 'cross-tool', i.e. it runs on a host working on target object
files. Hence, if you want 'libcexp' for a target and the 'xsyms' tool for
generating symbol tables you must build the package twice: a cross-build will
generate 'libcexp' for running 'cexp' on the target, a native-build generates
'xsyms' which can be used for extracting symbol tables on target-objects
as well as host-objects. The native build also generates 'libcexp' and the 'cexp'
demo program for execution on the host...

Recomendation: start with a host build (e.g. on linux or solaris) and
play around with the demo.

RTEMS_NOTE:
Cexp (and the patched tecla library) contain some hacks to avoid
having to build for a specific BSP. Hence, one instance of the libraries
per CPU architecture should be enough (at least for PowerPC - other RTEMS
targets are untested). This also eliminates the need for
the RTEMS makefile system. The package can be built ignoring the BSP - just
specify the correct cross compiler when configuring (setenv CC).

Running the Cexp Demo on a Host
- - - - - - - - - - - - - - - -
Invoke the executable telling it to read symbols from the executable
file:

    ./cexp -s cexp

You now can type expressions etc. See 'README' for details about using
CEXP.

On some systems you may get errors 'libtecla-1.4.1.so not found' or 
similar. In this case, libtecla was built as a shared library but not
installed into one of the directories searched by the (system's)
runtime linker. Use the LD_LIBRARY_PATH environment variable and set
it to point to the directory where libtecla was built.

Tested Configurations:
----------------------
 - linux-x86
 - linux-ppc
 - solaris-sparc
 - RTEMS-mvme23xx (PowerPC 604)
 - RTEMS-svgm     (PowerPC 750 and 7400)


Installing Cexp:
- - - - - - - - -
Theoretically, 'make install' should do the job (provided that you specified
the correct '--prefix' options during configuration - this is just one
more example why GNU configure SUCKS - changing the install location after
configuration [and spending LOTS of time] is difficult if not impossible).

However, as this is prone to missing the correct location and installing
unwanted docs etc.  I prefer a manual install (I have 3 to 4 cross-gccs -
each one with its own 'info' 'man'):

Install the relevant libraries (paths relative to the build directory)
	libcexp.a
	binutils-xxx/bfd/.libs/libbfd.a
	binutils-xxx/libiberty/libiberty.a
	binutils-xxx/opcodes/.libs/libopcodes.a
	libtecla-xxx/libtecla_r.a
	regexp/libregexp.a
and headers
	../cexp.h
        ../cexpHelp.h
	other library headers as needed
